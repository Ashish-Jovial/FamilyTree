// <auto-generated />
using System;
using Backend.FamilyTree;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Backend.FamilyTree.Migrations
{
    [DbContext(typeof(FamilyTreeDbContext))]
    [Migration("20240824183229_FamilyTreeDB")]
    partial class FamilyTreeDB
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Models.FamilyTree.Models.DeletionRequest", b =>
                {
                    b.Property<Guid>("RequestID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VerifiedByAdminID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VerifiedBySuperAdminID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("VerifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("RequestID");

                    b.HasIndex("UserID");

                    b.HasIndex("VerifiedBySuperAdminID");

                    b.ToTable("DeletionRequests");
                });

            modelBuilder.Entity("Models.FamilyTree.Models.Family", b =>
                {
                    b.Property<Guid>("FamilyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FamilyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GovFamilyID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("HeadOfFamilyID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ParentFamilyID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("FamilyID");

                    b.HasIndex("HeadOfFamilyID");

                    b.HasIndex("ParentFamilyID");

                    b.ToTable("Families");
                });

            modelBuilder.Entity("Models.FamilyTree.Models.FamilyHeadChangeRequest", b =>
                {
                    b.Property<Guid>("RequestID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApprovalStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeathReportedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeceasedMemberID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FamilyID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeathNotification")
                        .HasColumnType("bit");

                    b.Property<Guid>("PreviousHeadID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProposedHeadID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("RequestedByID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RequestID");

                    b.HasIndex("FamilyID");

                    b.HasIndex("PreviousHeadID");

                    b.HasIndex("ProposedHeadID");

                    b.HasIndex("RequestedByID");

                    b.ToTable("FamilyHeadChangeRequests");
                });

            modelBuilder.Entity("Models.FamilyTree.Models.FamilyMember", b =>
                {
                    b.Property<Guid>("FamilyMemberID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("FamilyID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("FamilyMemberID");

                    b.HasIndex("FamilyID");

                    b.HasIndex("UserID");

                    b.ToTable("FamilyMembers");
                });

            modelBuilder.Entity("Models.FamilyTree.Models.FamilySetting", b =>
                {
                    b.Property<Guid>("SettingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FamilyID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SettingName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SettingValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SettingID");

                    b.HasIndex("FamilyID");

                    b.ToTable("FamilySettings");
                });

            modelBuilder.Entity("Models.FamilyTree.Models.SuperAdmin", b =>
                {
                    b.Property<Guid>("SuperAdminID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SuperAdminID");

                    b.ToTable("SuperAdmins");
                });

            modelBuilder.Entity("Models.FamilyTree.Models.User", b =>
                {
                    b.Property<Guid>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AadharCard")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedByAdminID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PanCard")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("StudentIdCard")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VoterCard")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Models.FamilyTree.Models.UserPersonalDetails", b =>
                {
                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserID");

                    b.ToTable("UserPersonalDetails");
                });

            modelBuilder.Entity("Models.FamilyTree.Models.UserProfessionalDetails", b =>
                {
                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("AnnualIncome")
                        .HasColumnType("real");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Occupation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserID");

                    b.ToTable("UserProfessionalDetails");
                });

            modelBuilder.Entity("Models.FamilyTree.Models.DeletionRequest", b =>
                {
                    b.HasOne("Models.FamilyTree.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.FamilyTree.Models.SuperAdmin", "VerifiedBy")
                        .WithMany("DeletionRequests")
                        .HasForeignKey("VerifiedBySuperAdminID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("VerifiedBy");
                });

            modelBuilder.Entity("Models.FamilyTree.Models.Family", b =>
                {
                    b.HasOne("Models.FamilyTree.Models.User", "HeadOfFamily")
                        .WithMany()
                        .HasForeignKey("HeadOfFamilyID");

                    b.HasOne("Models.FamilyTree.Models.Family", "ParentFamily")
                        .WithMany("SubFamilies")
                        .HasForeignKey("ParentFamilyID");

                    b.Navigation("HeadOfFamily");

                    b.Navigation("ParentFamily");
                });

            modelBuilder.Entity("Models.FamilyTree.Models.FamilyHeadChangeRequest", b =>
                {
                    b.HasOne("Models.FamilyTree.Models.Family", "Family")
                        .WithMany()
                        .HasForeignKey("FamilyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.FamilyTree.Models.User", "PreviousHead")
                        .WithMany()
                        .HasForeignKey("PreviousHeadID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.FamilyTree.Models.User", "ProposedHead")
                        .WithMany()
                        .HasForeignKey("ProposedHeadID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.FamilyTree.Models.User", "RequestedBy")
                        .WithMany()
                        .HasForeignKey("RequestedByID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Family");

                    b.Navigation("PreviousHead");

                    b.Navigation("ProposedHead");

                    b.Navigation("RequestedBy");
                });

            modelBuilder.Entity("Models.FamilyTree.Models.FamilyMember", b =>
                {
                    b.HasOne("Models.FamilyTree.Models.Family", "Family")
                        .WithMany("FamilyMembers")
                        .HasForeignKey("FamilyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.FamilyTree.Models.User", "User")
                        .WithMany("FamilyMemberships")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Family");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.FamilyTree.Models.FamilySetting", b =>
                {
                    b.HasOne("Models.FamilyTree.Models.Family", "Family")
                        .WithMany("FamilySettings")
                        .HasForeignKey("FamilyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Family");
                });

            modelBuilder.Entity("Models.FamilyTree.Models.UserPersonalDetails", b =>
                {
                    b.HasOne("Models.FamilyTree.Models.User", "User")
                        .WithOne("PersonalDetails")
                        .HasForeignKey("Models.FamilyTree.Models.UserPersonalDetails", "UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.FamilyTree.Models.UserProfessionalDetails", b =>
                {
                    b.HasOne("Models.FamilyTree.Models.User", "User")
                        .WithOne("ProfessionalDetails")
                        .HasForeignKey("Models.FamilyTree.Models.UserProfessionalDetails", "UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.FamilyTree.Models.Family", b =>
                {
                    b.Navigation("FamilyMembers");

                    b.Navigation("FamilySettings");

                    b.Navigation("SubFamilies");
                });

            modelBuilder.Entity("Models.FamilyTree.Models.SuperAdmin", b =>
                {
                    b.Navigation("DeletionRequests");
                });

            modelBuilder.Entity("Models.FamilyTree.Models.User", b =>
                {
                    b.Navigation("FamilyMemberships");

                    b.Navigation("PersonalDetails")
                        .IsRequired();

                    b.Navigation("ProfessionalDetails")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
